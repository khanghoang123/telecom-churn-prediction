import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler, OrdinalEncoder, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from category_encoders import TargetEncoder

# T·∫£i m√¥ h√¨nh
model = joblib.load('stacking_model.pkl')
ce_target = joblib.load('target_encoder.pkl')      
preprocessor = joblib.load('preprocessor.pkl') 
# N·∫øu b·∫°n c√≥ encoder ri√™ng cho 'City', th√¨ load encoder:
# ce_target = joblib.load('encoder.pkl')

st.set_page_config(page_title="Telecom Churn Prediction", layout="wide")
st.title("üìû Telecom Customer Churn Prediction App")
st.markdown("D·ª± ƒëo√°n kh√°ch h√†ng c√≥ r·ªùi b·ªè d·ªãch v·ª• hay kh√¥ng d·ª±a v√†o c√°c ƒë·∫∑c ƒëi·ªÉm c√° nh√¢n v√† h√†nh vi s·ª≠ d·ª•ng d·ªãch v·ª•.")

# ==== Nh·∫≠p th√¥ng tin kh√°ch h√†ng ====
with st.form("customer_form"):
    gender = st.selectbox("Gi·ªõi t√≠nh", ["Male", "Female"])
    age = st.slider("Tu·ªïi", 18, 100, 30)
    married = st.selectbox("T√¨nh tr·∫°ng h√¥n nh√¢n", ["Yes", "No"])
    dependents = st.number_input("S·ªë ng∆∞·ªùi ph·ª• thu·ªôc", min_value=0, max_value=10, value=0)
    city = st.text_input("Th√†nh ph·ªë", "Los Angeles")
    referrals = st.slider("S·ªë l∆∞·ª£t gi·ªõi thi·ªáu", 0, 20, 0)
    tenure = st.slider("S·ªë th√°ng s·ª≠ d·ª•ng", 1, 100, 12)
    streaming_music = st.selectbox("Nghe nh·∫°c tr·ª±c tuy·∫øn?", ['Yes', 'No'])
    online_security = st.selectbox("B·∫£o m·∫≠t tr·ª±c tuy·∫øn?", ['Yes', 'No'])
    unlimited_data = st.selectbox("D·ªØ li·ªáu kh√¥ng gi·ªõi h·∫°n?", ['Yes', 'No'])
    payment_method = st.selectbox("Ph∆∞∆°ng th·ª©c thanh to√°n", ['Bank Withdrawal', 'Credit Card', 'Mailed Check', 'Electronic Check'])
    paperless_billing = st.selectbox("H√≥a ƒë∆°n ƒëi·ªán t·ª≠?", ['Yes', 'No'])
    online_backup = st.selectbox("Sao l∆∞u tr·ª±c tuy·∫øn?", ['Yes', 'No'])
    streaming_movies = st.selectbox("Xem phim tr·ª±c tuy·∫øn?", ['Yes', 'No'])
    streaming_tv = st.selectbox("Xem TV tr·ª±c tuy·∫øn?", ['Yes', 'No'])
    premium_tech_support = st.selectbox("H·ªó tr·ª£ k·ªπ thu·∫≠t cao c·∫•p?", ['Yes', 'No'])
    device_protection_plan = st.selectbox("G√≥i b·∫£o v·ªá thi·∫øt b·ªã?", ['Yes', 'No'])
    offer = st.selectbox("G√≥i khuy·∫øn m√£i", ['None', 'Offer A', 'Offer B', 'Offer C', 'Offer D', 'Offer E'])
    phone_service = st.selectbox("C√≥ s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i?", ['Yes', 'No'])
    avg_long_distance = st.number_input("Ph√≠ g·ªçi xa trung b√¨nh h√†ng th√°ng", min_value=0.0, value=10.0)
    multiple_lines = st.selectbox("Nhi·ªÅu ƒë∆∞·ªùng d√¢y?", ['Yes', 'No'])
    internet_service = st.selectbox("C√≥ Internet?", ['Yes', 'No'])
    internet_type = st.selectbox("Lo·∫°i Internet", ['Cable', 'Fiber Optic', 'DSL'])
    avg_gb = st.number_input("S·ª≠ d·ª•ng d·ªØ li·ªáu trung b√¨nh (GB/th√°ng)", min_value=0.0, value=10.0)
    contract = st.selectbox("Lo·∫°i h·ª£p ƒë·ªìng", ['Month-to-Month', 'One Year', 'Two Year'])
    monthly_charge = st.number_input("Chi ph√≠ h√†ng th√°ng", min_value=0.0, value=50.0)
    total_charges = st.number_input("T·ªïng chi ph√≠", min_value=0.0, value=600.0)
    total_refunds = st.number_input("T·ªïng ho√†n ti·ªÅn", min_value=0.0, value=0.0)
    total_extra = st.number_input("Ph√≠ d·ªØ li·ªáu ph√°t sinh", min_value=0.0, value=0.0)
    total_long = st.number_input("T·ªïng ph√≠ g·ªçi xa", min_value=0.0, value=50.0)
    total_revenue = st.number_input("T·ªïng doanh thu", min_value=0.0, value=650.0)
    submit = st.form_submit_button("D·ª± ƒëo√°n")

if submit:
    # ==== Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ====
    input_df = pd.DataFrame([{
        'Gender': gender,
        'Age': age,
        'Married': married,
        'Number of Dependents': dependents,
        'City': city,
        'Number of Referrals': referrals,
        'Tenure in Months': tenure,
        'Offer': offer,
        'Phone Service': phone_service,
        'Avg Monthly Long Distance Charges': avg_long_distance,
        'Multiple Lines': multiple_lines,
        'Internet Service': internet_service,
        'Internet Type': internet_type,
        'Avg Monthly GB Download': avg_gb,
        'Contract': contract,
        'Monthly Charge': monthly_charge,
        'Total Charges': total_charges,
        'Total Refunds': total_refunds,
        'Total Extra Data Charges': total_extra,
        'Total Long Distance Charges': total_long,
        'Total Revenue': total_revenue,
        'Streaming Music': streaming_music,
        'Online Security': online_security,
        'Unlimited Data': unlimited_data,
        'Payment Method': payment_method,
        'Paperless Billing': paperless_billing,
        'Online Backup': online_backup,
        'Streaming Movies': streaming_movies,
        'Streaming TV': streaming_tv,
        'Premium Tech Support': premium_tech_support,
        'Device Protection Plan': device_protection_plan,
    }])

    # T·∫°o c·ªôt ƒë·∫∑c tr∆∞ng m·ªõi
    input_df['Refund_Rate'] = input_df['Total Refunds'] / (input_df['Total Revenue'] + 1e-6)
    input_df['Charge_per_Month'] = input_df['Total Charges'] / (input_df['Tenure in Months'] + 1e-6)
    input_df['Data_per_Month'] = input_df['Avg Monthly GB Download'] / (input_df['Tenure in Months'] + 1e-6)
    input_df['New_Customer'] = input_df['Tenure in Months'].apply(lambda x: 1 if x <= 6 else 0)
    input_df['Low_Revenue_Flag'] = input_df['Total Revenue'].apply(lambda x: 1 if x < 400 else 0)    

    input_df['City'] = ce_target.transform(input_df['City'])
    
    input_processed = preprocessor.transform(input_df)


    # ==== D·ª± ƒëo√°n ====
    prediction = model.predict(input_processed)[0]
    proba = model.predict_proba(input_processed)[0][1]

    st.subheader("üîç K·∫øt qu·∫£ d·ª± ƒëo√°n:")
    if prediction == 1:
        st.error(f"Kh√°ch h√†ng **C√ì KH·∫¢ NƒÇNG R·ªúI B·ªé** v·ªõi x√°c su·∫•t {proba:.2%}")
    else:
        st.success(f"Kh√°ch h√†ng **C√ì XU H∆Ø·ªöNG ·ªû L·∫†I** v·ªõi x√°c su·∫•t {(1 - proba):.2%}")
